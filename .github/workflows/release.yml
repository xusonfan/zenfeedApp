# GitHub Actions 工作流：基于 gradle.properties 的全自动 Release
name: Create GitHub Release

on:
  push:
    branches:
      - master # 当向 master 分支推送代码时触发

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    # 为工作流授予向仓库写入内容的权限，以便能推送 Git 标签
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # 拉取所有历史记录，以便能正确生成更新日志
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Decode Keystore and write to file
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" | base64 --decode > ${{ github.workspace }}/app/mykey

      - name: Create local.properties file
        run: |
          echo "keystore.file=${{ github.workspace }}/app/mykey" >> local.properties
          echo "keystore.password=${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" >> local.properties
          echo "key.alias=${{ secrets.RELEASE_KEY_ALIAS }}" >> local.properties
          echo "key.password=${{ secrets.RELEASE_KEY_PASSWORD }}" >> local.properties

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Read version from gradle.properties
        # 从 gradle.properties 文件中读取版本名称，并将其设置为后续步骤可用的环境变量
        id: version_reader
        run: |
          versionName=$(grep 'appVersionName' gradle.properties | cut -d'=' -f2)
          echo "versionName=$versionName" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        # 检查与版本对应的 Git 标签是否已存在
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.version_reader.outputs.versionName }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.version_reader.outputs.versionName }} already exists. No new release needed."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Tag v${{ steps.version_reader.outputs.versionName }} does not exist. Proceeding with release."
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Build with Gradle
        # 仅在标签不存在时执行
        # versionCode 会在构建脚本中自动计算，无需传入
        if: steps.check_tag.outputs.skip == 'false'
        run: ./gradlew assembleRelease

      - name: Create Git Tag
        # 仅在标签不存在时执行
        if: steps.check_tag.outputs.skip == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "v${{ steps.version_reader.outputs.versionName }}" -a -m "Release v${{ steps.version_reader.outputs.versionName }}"
          git push origin "v${{ steps.version_reader.outputs.versionName }}"

      - name: Create Release and Upload Asset
        # 仅在标签不存在时执行
        if: steps.check_tag.outputs.skip == 'false'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: app/build/outputs/apk/release/app-release.apk
          # 使用我们读取的版本号来创建 Release
          tag_name: "v${{ steps.version_reader.outputs.versionName }}"
          name: "Release v${{ steps.version_reader.outputs.versionName }}"
          generate_release_notes: true