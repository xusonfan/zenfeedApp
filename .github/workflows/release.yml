# GitHub Actions 工作流：自动创建 Release
name: Create GitHub Release

on:
  push:
    tags:
      - 'v*.*.*' # 当一个格式如 v1.0.0 的标签被推送时触发

jobs:
  build-and-release:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 虚拟机运行
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Decode Keystore and write to file
        # 密钥库被存储为 Base64 编码的 Secret，以避免换行符问题
        # 你需要在 GitHub 仓库的 Secrets 中创建一个名为 RELEASE_KEYSTORE 的 Secret
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" | base64 --decode > ${{ github.workspace }}/app/mykey

      - name: Create local.properties file
        # 从 GitHub Secrets 中读取密钥信息并写入 local.properties 文件
        # 这些 Secrets 需要你预先在 GitHub 仓库中设置
        run: |
          echo "keystore.file=${{ github.workspace }}/app/mykey" >> local.properties
          echo "keystore.password=${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" >> local.properties
          echo "key.alias=${{ secrets.RELEASE_KEY_ALIAS }}" >> local.properties
          echo "key.password=${{ secrets.RELEASE_KEY_PASSWORD }}" >> local.properties

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        # 使用 assembleRelease 构建 APK 文件
        run: ./gradlew assembleRelease

      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          # GITHUB_TOKEN 是由 GitHub Actions 自动提供的
          token: ${{ secrets.GITHUB_TOKEN }}
          # 指定要上传的构建产物路径
          files: app/build/outputs/apk/release/app-release.apk
          # 将使用标签名作为 Release 的标题
          name: Release ${{ github.ref_name }}
          # 自动生成此版本与上一版本之间的更新日志
          generate_release_notes: true